{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#assignment 1\n",
    "#type of differenet values\n",
    "a =1  \n",
    "print(type(a))\n",
    "b =3.14 \n",
    "print(type(b)) \n",
    "c= \"big data!\"\n",
    "print(type(c)) \n",
    "d ='big data!'\n",
    "print(type(d)) \n",
    "e =True \n",
    "print(type(e))\n",
    "f =False\n",
    "print(type(f))\n",
    "g = [1,2,\"intruder\",3]\n",
    "print(type(g))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#get int from 1-100 and then for multiple of 3,5,and 15 print buzz, fizz and buzzfizz respectively,\n",
    "i = 1\n",
    "while(i <= 100):\n",
    "  if(i % 3 == 0):\n",
    "    print(\"buzz\")\n",
    "    \n",
    "  elif(i % 5 == 0):\n",
    "     print(\"fizz\")\n",
    "  elif(i % 3 ==0 and i % 5 == 0):\n",
    "     print(\"buzzFizz\")\n",
    "  else:\n",
    "        print(i)\n",
    "  i += 1\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#find max and min in a list\n",
    "makeAList=[i for i in range(1,1001)]\n",
    "print('max value in a list:',max(makeALlist))\n",
    "print ('min vlue in a lsit:', min(makeAList))\n",
    "#find sum of multiple of 3 or 5 below 1000\n",
    "make_a_list=[i for i in range(1,1001)]\n",
    "summ = 0\n",
    "i = 1\n",
    "while i < 1001:\n",
    "    if ((i % 3 == 0 or i % 5 == 0)):\n",
    "        summ += i\n",
    "        i += 1\n",
    "    else:\n",
    "        i += 1\n",
    "print(summ)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#ignor wovel in a string\n",
    "def rem_vowel(string):\n",
    "\n",
    "    vowels=('a', 'e', 'i','o', 'u', 'A','E','I','O','U')\n",
    "    for x in string.lower():\n",
    "        if x in vowels:\n",
    "            string = string.replace(x,\"\")\n",
    "    print(string)\n",
    "string = \"this is the end\"\n",
    "rem_vowel(string)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
