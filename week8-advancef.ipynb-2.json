{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#QUESTION:perform classification/regression on your dataset using KNeighborsClassifier orKNeighborsRegressor, \n",
    "#as applicable, and print the performance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "#I need to build a model to be used to predict sex of a new or unknown case. \n",
    "\n",
    "# Reading data & checking top few data rows\n",
    "\n",
    "import itertools\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.ticker import NullFormatter\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.ticker as ticker\n",
    "from sklearn import preprocessing\n",
    "%matplotlib inline\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "os.getcwd()\n",
    "os.chdir('/Users/ameneh/Downloads')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 442 entries, 0 to 441\n",
      "Data columns (total 11 columns):\n",
      "AGE    442 non-null int64\n",
      "SEX    442 non-null int64\n",
      "BMI    442 non-null float64\n",
      "BP     442 non-null float64\n",
      "S1     442 non-null int64\n",
      "S2     442 non-null float64\n",
      "S3     442 non-null float64\n",
      "S4     442 non-null float64\n",
      "S5     442 non-null float64\n",
      "S6     442 non-null int64\n",
      "Y      442 non-null int64\n",
      "dtypes: float64(6), int64(5)\n",
      "memory usage: 38.1 KB\n"
     ]
    }
   ],
   "source": [
    "#read the file\n",
    "df = pd.read_csv('/Users/ameneh/Downloads/diabetes.data',\n",
    "                 sep='\\s+',\n",
    "                 header=0)\n",
    "\n",
    "\n",
    "df.tail(10)\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    235\n",
       "2    207\n",
       "Name: SEX, dtype: int64"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Letâ€™s see how many of each class is in our data set\n",
    "df['SEX'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x1a1960b470>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.hist(column='AGE', bins=50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['AGE', 'SEX', 'BMI', 'BP', 'S1', 'S2', 'S3', 'S4', 'S5', 'S6', 'Y'], dtype='object')"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "# COLUMN BELOW IS JUST FOR REMINDING ME AND IS NOT PART OF THE CODE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "#make a numpy array of our dataframe to give to scikit learn library\n",
    "#x = df[['AGE', 'BMI', 'BP', 'S1', 'S2', 'S3', 'S4', 'S5', 'S6', 'Y']] .values\n",
    "#x = pd.DataFrame(index=range(0,len(df)),columns=['AGE', 'BMI', 'BP', 'S1', 'S2', 'S3', 'S4', 'S5', 'S6', 'Y'])\n",
    "#type(x)\n",
    "#x= np.array(df.drop).astype(float))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = np.array(df.drop(['SEX'], 1).astype(float))\n",
    "y = np.array(df['SEX'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train set: (353, 10) (353,)\n",
      "Test set: (89, 10) (89,)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=4)\n",
    "print ('Train set:', x_train.shape,  y_train.shape)\n",
    "print ('Test set:', x_test.shape,  y_test.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "#k-nearest neighbors\n",
    "#importing libraries\n",
    "from sklearn import neighbors\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "scaler = MinMaxScaler(feature_range=(0, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.53333333, 0.55785124, 0.43661972, ..., 0.69998947, 0.87931034,\n",
       "        0.46835443],\n",
       "       [0.63333333, 0.21487603, 0.6384507 , ..., 0.62209976, 0.79310345,\n",
       "        0.30063291],\n",
       "       [0.56666667, 0.10330579, 0.22535211, ..., 0.25655516, 0.15517241,\n",
       "        0.12658228],\n",
       "       ...,\n",
       "       [0.68333333, 0.28512397, 0.53056338, ..., 0.30503001, 0.5       ,\n",
       "        0.33860759],\n",
       "       [0.56666667, 0.38429752, 0.28169014, ..., 0.5511601 , 0.46551724,\n",
       "        0.39873418],\n",
       "       [0.71666667, 0.65702479, 0.54929577, ..., 0.61044614, 0.63793103,\n",
       "        0.49050633]])"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train_scaled = scaler.fit_transform(x_train)\n",
    "x_train_scaled"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "#scaling data\n",
    "x_train_scaled = scaler.fit_transform(x_train)\n",
    "x_train = pd.DataFrame(x_train_scaled)\n",
    "x_test_scaled = scaler.fit_transform(x_test)\n",
    "x_test = pd.DataFrame(x_test_scaled)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier#THIS LIBRARY CLASSIFY DATA AND LABLE IT ACCORDING TO ITS \n",
    "                                                 #TRAIN SET"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "                     metric_params=None, n_jobs=None, n_neighbors=4, p=2,\n",
       "                     weights='uniform')"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "k = 4\n",
    "#Train Model and Predict  \n",
    "neigh = KNeighborsClassifier(n_neighbors = k).fit(x_train,y_train)\n",
    "neigh"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 2, 1, 1])"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yhat = neigh.predict(x_test)\n",
    "yhat[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train set Accuracy:  0.7932011331444759\n",
      "Test set Accuracy:  0.5955056179775281\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "print(\"Train set Accuracy: \", metrics.accuracy_score(y_train, neigh.predict(x_train)))\n",
    "print(\"Test set Accuracy: \", metrics.accuracy_score(y_test, yhat))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.57303371, 0.57303371, 0.62921348, 0.59550562, 0.70786517,\n",
       "       0.56179775, 0.65168539, 0.59550562, 0.62921348])"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "params = 10\n",
    "mean_acc = np.zeros((params-1))\n",
    "std_acc = np.zeros((params-1))\n",
    "ConfustionMx = [];\n",
    "for n in range(1,params):\n",
    "    \n",
    "    #Train Model and Predict  \n",
    "    neigh = KNeighborsClassifier(n_neighbors = n).fit(x_train,y_train)\n",
    "    yhat=neigh.predict(x_test)\n",
    "    mean_acc[n-1] = metrics.accuracy_score(y_test, yhat)\n",
    "\n",
    "    \n",
    "    std_acc[n-1]=np.std(yhat==y_test)/np.sqrt(yhat.shape[0])\n",
    "\n",
    "mean_acc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(range(1,params),mean_acc,'g')\n",
    "plt.fill_between(range(1,params),mean_acc - 1 * std_acc,mean_acc + 1 * std_acc, alpha=0.10)\n",
    "plt.ylabel('Accuracy ')\n",
    "plt.xlabel('Number of Nabors (K)')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
