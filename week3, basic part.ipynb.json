{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Write a program (function!) that takes a list and returns a new list that contains all \n",
    "#the elements of the first list minus all the duplicates.\n",
    "def anti_duplicate(list):\n",
    "\n",
    "    for i in list:\n",
    "        count = list.count(i)\n",
    "        if count>1:\n",
    "            list.remove(i)\n",
    "    return list\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Write a function that takes an ordered list of numbers (a list where the elements are in order from smallest to \n",
    "#largest) and another number. The function decides whether or not the given number is inside the list and returns \n",
    "#(then prints) an appropriate boolean.\n",
    "\n",
    "def check_value(list1,number):\n",
    "    f =0\n",
    "    for i in list1:\n",
    "        print(i)\n",
    "        if i == number:\n",
    "            f =1\n",
    "    if f == 1:\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4, 16, 36, 64, 100]\n"
     ]
    }
   ],
   "source": [
    "#Write one line of Python that takes this list a and makes a new list that has only the even elements of this list in\n",
    "#it.\n",
    "a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n",
    "evenNum = list(filter(lambda x:(x % 2==0), a))\n",
    "print(evenNum)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
